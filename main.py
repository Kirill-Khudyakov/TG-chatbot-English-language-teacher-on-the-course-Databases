import configparser
import time
import sqlalchemy
import telebot
import logging
import random
from telebot.storage import StateMemoryStorage
from telebot import types, custom_filters
from telebot.handler_backends import State, StatesGroup
from sqlalchemy.orm import sessionmaker
from models import create_tables, Word, User, UserWord


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s',
                    handlers=[
                        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
                        logging.FileHandler("user_states.log"),
                        # logging.StreamHandler()  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
                    ])
logger = logging.getLogger(__name__)


def user_list(engine):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        session = sessionmaker(bind=engine)()
        users = session.query(User).all()
        users = [user.chat_id for user in users]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return []
    finally:
        session.close()
    return users


def add_users(engine, new_user_id, user_name):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    try:
        session = sessionmaker(bind=engine)()
        session.add(User(chat_id=new_user_id, first_name=user_name))
        session.commit()
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (ID: {new_user_id}) –¥–æ–±–∞–≤–ª–µ–Ω.')
    except Exception as e:
        logger.error(
            f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} (ID: {new_user_id}): {e}')
    finally:
        session.close()


def get_words(engine, new_user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        session = sessionmaker(bind=engine)()
        words = session.query(UserWord.word, UserWord.translate).join(
            User, User.id == UserWord.user_id).filter(User.chat_id == new_user_id).all()
        all_words = session.query(Word.word, Word.translate).all()
        result = all_words + words
    except Exception as e:
        logger.error(
            f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {new_user_id}: {e}')
        return []
    finally:
        session.close()
    return result


def add_words(engine, chat_id, word, translate):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        session = sessionmaker(bind=engine)()
        user_id = session.query(User.id).filter(
            User.chat_id == chat_id).first()[0]
        session.add(UserWord(word=word, translate=translate, user_id=user_id))
        session.commit()
        user_name = session.query(User).filter(
            User.chat_id == chat_id).first().name
        logger.info(
            f'–°–ª–æ–≤–æ "{word}" –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} (ID: {chat_id}).')
    except Exception as e:
        logger.error(
            f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞ "{word}" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}')
    finally:
        session.close()


def delete_words(engine, chat_id, word):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        session = sessionmaker(bind=engine)()
        user_id = session.query(User.id).filter(
            User.chat_id == chat_id).first()[0]
        session.query(UserWord).filter(UserWord.user_id ==
                                       user_id, UserWord.word == word).delete()
        session.commit()
        user_name = session.query(User).filter(User.chat_id == chat_id).first()
        user_display_name = user_name.first_name if user_name else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'

        logger.info(
            f'–°–ª–æ–≤–æ "{word}" —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_display_name} (ID: {chat_id}).')
    except Exception as e:
        logger.error(
            f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞ "{word}" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}')
    finally:
        session.close()


# –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞
config = configparser.ConfigParser()
config.read('config.ini')


# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
DSN = config['database']['dsn']
engine = sqlalchemy.create_engine(DSN)


Session = sessionmaker(bind=engine)
session = Session()
create_tables(engine)


# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
state_storage = StateMemoryStorage()
TOKEN = config['token']['tg_bot']
bot = telebot.TeleBot(TOKEN, state_storage=state_storage)

known_users = user_list(engine)
print(f'–î–æ–±–∞–≤–ª–µ–Ω–æ {len(known_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
userStep = {}
buttons = []


def show_hint(*lines):
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return '\n'.join(lines)


def show_target(data):
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å —Ü–µ–ª–µ–≤—ã–º —Å–ª–æ–≤–æ–º –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–º."""
    return f"{data['translate_word']} -> {data['target_word']}"


class Command:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚úèÔ∏è'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üóëÔ∏è'
    NEXT = '–î–∞–ª—å—à–µ ‚û°Ô∏è'


class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    another_word = State()


def get_user_id(user_id):
    if user_id in userStep:
        return userStep[user_id]
    else:
        known_users.append(user_id)
        userStep[user_id] = 0
        print(f'–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}')
        return 0


@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    user_name = message.from_user.first_name

    if chat_id not in known_users:
        known_users.append(chat_id)
        add_users(engine, chat_id, user_name)
        userStep[chat_id] = 0
        bot.send_message(
            message.chat.id,
            f'üëã –ü—Ä–∏–≤–µ—Ç, {user_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *EnglishQuest*! üåü\n\n'
            '–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤. üìö\n'
            '–° –ø–æ–º–æ—â—å—é –º–µ–Ω—è –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n'
            '‚úÖ –ò–∑—É—á–∞—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞\n'
            '‚úÖ –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è\n'
            '‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n\n'
            '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /help, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥. üöÄ'
        )
        logger.info(
            f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (ID: {chat_id}) –Ω–∞—á–∞–ª –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º.')
    else:
        bot.send_message(
            message.chat.id, f'{user_name}!\n'
            '–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.üì≤\n'
            '–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã. üöÄ')
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (ID: {chat_id}) —É–∂–µ –≤ —Å–∏—Å—Ç–µ–º–µ.')


@bot.message_handler(commands=['help'])
def send_help(message):
    bot.send_message(
        message.chat.id,
        'üîç **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n\n'
        '/learn - –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ —Å–ª–æ–≤ üìö\n'
        '/list - —Å–ø–∏—Å–æ–∫ –∏–∑—É—á–∞–µ–º—ã—Ö —Å–ª–æ–≤ üìú\n'
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤—ã—à–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å!'
    )


@bot.message_handler(commands=['list'])
def list_words(message):
    chat_id = message.chat.id
    user_name = message.from_user.first_name
    words = get_words(engine, chat_id)

    if not words:
        bot.send_message(
            chat_id, '–£ –≤–∞—Å –Ω–µ—Ç –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /learn –∏–ª–∏ /add.')
        logger.info(
            f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (ID: {chat_id}) –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤, –Ω–æ —É –Ω–µ–≥–æ –∏—Ö –Ω–µ—Ç.')
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    word_list = '\n'.join([f"{word[0]} -> {word[1]}" for word in words])
    bot.send_message(chat_id, f'üìú –í–∞—à–∏ –∏–∑—É—á–∞–µ–º—ã–µ —Å–ª–æ–≤–∞:\n{word_list}')
    logger.info(
        f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (ID: {chat_id}) –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤: {word_list}')


@bot.message_handler(commands=['learn'])
def learn_words(message):
    global buttons
    buttons = []

    chat_id = message.chat.id
    user_name = message.from_user.first_name
    words = get_words(engine, chat_id)

    if len(words) < 4:
        bot.send_message(
            chat_id, '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Å–ª–æ–≤.')
        logger.info(
            f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (ID: {chat_id}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ, –Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤.')
        return

    get_word = random.sample(words, 4)
    word = get_word[0]
    target_word = word[1]
    translate = word[0]

    target_word_btn = types.KeyboardButton(target_word)
    buttons.append(target_word_btn)
    others = [word[1] for word in get_word[1:]]
    other_words_btns = [types.KeyboardButton(word) for word in others]
    buttons.extend(other_words_btns)
    random.shuffle(buttons)

    markup = types.ReplyKeyboardMarkup(row_width=2)
    next_btn = types.KeyboardButton(Command.NEXT)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
    buttons.extend([next_btn, add_word_btn, delete_word_btn])
    markup.add(*buttons)

    bot.send_message(
        message.chat.id,
        f'üó£Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞: üá∑üá∫ *{word[0]}* \n\n'
        '–í–æ—Ç –≤–∞—à–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n',
        reply_markup=markup
    )
    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = target_word
        data['translate_word'] = translate
        data['other_words'] = others
    logger.info(
        f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (ID: {chat_id}) –Ω–∞—á–∞–ª –æ–±—É—á–µ–Ω–∏–µ —Å–æ —Å–ª–æ–≤–æ–º: {word[0]}.')


@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_cards(message):
    learn_words(message)


@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_word(message):
    user_name = message.from_user.first_name if message.from_user.first_name else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        try:
            logger.info(
                f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (ID: {message.chat.id}) –∑–∞–ø—Ä–æ—Å–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞: {data["translate_word"]}.')
            delete_words(engine, message.chat.id, data['translate_word'])
            bot.send_message(message.chat.id, '‚úÖ –°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {e}")
            bot.send_message(
                message.chat.id, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')


@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word(message):
    chat_id = message.chat.id
    user_name = message.from_user.first_name
    userStep[chat_id] = 1
    bot.send_message(chat_id, '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –†—É—Å—Å–∫–æ–º üá∑üá∫:')
    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
    logger.info(
        f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (ID: {chat_id}) –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞.')


@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):
    text = message.text
    markup = types.ReplyKeyboardMarkup(row_width=2)
    chat_id = message.chat.id
    user_name = message.from_user.first_name

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ chat_id –≤ userStep
    if chat_id not in userStep:
        userStep[chat_id] = 0

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if userStep[chat_id] == 0:
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            target_word = data.get('target_word')
            if text.strip().lower() == target_word.strip().lower():
                hint = show_target(data)
                hint_text = ['‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!', hint]
                next_btn = types.KeyboardButton(Command.NEXT)
                add_word_btn = types.KeyboardButton(Command.ADD_WORD)
                delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
                markup.add(next_btn, add_word_btn, delete_word_btn)
                bot.send_message(message.chat.id, '\n'.join(
                    hint_text), reply_markup=markup)
            else:
                bot.send_message(
                    message.chat.id, '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')

    elif userStep[chat_id] == 1:
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['target_word'] = text
            bot.send_message(
                chat_id, 'Enter the English translation of the word üá∫üá∏: ')
            bot.set_state(message.from_user.id,
                          MyStates.translate_word, message.chat.id)
            userStep[chat_id] = 2

    elif userStep[chat_id] == 2:
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['translate_word'] = text
        add_words(engine, chat_id, data['target_word'], data['translate_word'])
        bot.send_message(chat_id, '‚úÖ –°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!')
        userStep[chat_id] = 0  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        logger.info(
            f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (ID: {chat_id}) –¥–æ–±–∞–≤–∏–ª —Å–ª–æ–≤–æ: {data["target_word"]} —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º: {data["translate_word"]}.')
        learn_words(message)


bot.add_custom_filter(custom_filters.StateFilter(bot))

if __name__ == "__main__":
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        time.sleep(15)
